{"ast":null,"code":"var _jsxFileName = \"/home/denner/Documentos/WebDevelopment/trybe-projects/project-trivia-react-redux/sd-07-project-trivia-react-redux/src/components/Quiz.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Quiz.css';\n\nclass Quiz extends Component {\n  // constructor() {\n  //  super();\n  //  this.state = {\n  //    answered: false,\n  //  };\n  // }\n  // handleClick() {\n  // const { answered } = this.state;\n  //  this.setState({\n  //    answered: true,\n  //  });\n  // }\n  render() {\n    // const { answered } = this.state;\n    const _this$props = this.props,\n          results = _this$props.results,\n          nextQuestion = _this$props.nextQuestion;\n    const correctAnswer = results.correct_answer;\n    const incorrectAnswers = results.incorrect_answers;\n    const question = results.question,\n          category = results.category,\n          difficulty = results.difficulty;\n    const allQuestions = [correctAnswer, ...incorrectAnswers];\n    const magicNumber = 0.5;\n    const allIndex = allQuestions.map(anyQuestion => allQuestions.indexOf(anyQuestion)).sort(() => Math.random() - magicNumber);\n    const shuffledArray = allIndex.map(shuffledNumber => allQuestions[shuffledNumber]); // const shuffledArray = allIndex.sort((a,b) => Math.random() - 0.5);\n\n    console.log(allIndex);\n    console.log(shuffledArray);\n    console.log(results);\n\n    const renderQuestions = (questionToRender, number) => {\n      if (questionToRender === correctAnswer) {\n        return React.createElement(\"button\", {\n          className: \"answer-correct\",\n          \"data-testid\": \"correct-answer\",\n          type: \"button\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 37\n          },\n          __self: this\n        }, correctAnswer);\n      }\n\n      return React.createElement(\"button\", {\n        className: \"answer-wrong\",\n        \"data-testid\": `wrong-answer-${number}`,\n        type: \"button\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42\n        },\n        __self: this\n      }, questionToRender);\n    };\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, question), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, difficulty), React.createElement(\"p\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, category), shuffledArray.map((oneQuestion, index) => renderQuestions(oneQuestion, index)), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: nextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }, \"Pr\\xF3xima\"));\n  }\n\n}\n\nexport default Quiz;\nQuiz.propTypes = {\n  results: PropTypes.arrayOf(PropTypes.object).isRequired,\n  nextQuestion: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/home/denner/Documentos/WebDevelopment/trybe-projects/project-trivia-react-redux/sd-07-project-trivia-react-redux/src/components/Quiz.js"],"names":["React","Component","PropTypes","Quiz","render","props","results","nextQuestion","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","question","category","difficulty","allQuestions","magicNumber","allIndex","map","anyQuestion","indexOf","sort","Math","random","shuffledArray","shuffledNumber","console","log","renderQuestions","questionToRender","number","oneQuestion","index","propTypes","arrayOf","object","isRequired","func"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,YAAP;;AAEA,MAAMC,IAAN,SAAmBF,SAAnB,CAA6B;AAC3B;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEAG,EAAAA,MAAM,GAAG;AACP;AADO,wBAE2B,KAAKC,KAFhC;AAAA,UAECC,OAFD,eAECA,OAFD;AAAA,UAEUC,YAFV,eAEUA,YAFV;AAAA,UAGiBC,aAHjB,GAGmCF,OAHnC,CAGCG,cAHD;AAAA,UAIoBC,gBAJpB,GAIyCJ,OAJzC,CAICK,iBAJD;AAAA,UAKCC,QALD,GAKoCN,OALpC,CAKCM,QALD;AAAA,UAKWC,QALX,GAKoCP,OALpC,CAKWO,QALX;AAAA,UAKqBC,UALrB,GAKoCR,OALpC,CAKqBQ,UALrB;AAMP,UAAMC,YAAY,GAAG,CAACP,aAAD,EAAgB,GAAGE,gBAAnB,CAArB;AACA,UAAMM,WAAW,GAAG,GAApB;AACA,UAAMC,QAAQ,GAAGF,YAAY,CAACG,GAAb,CAAkBC,WAAD,IAAiBJ,YAAY,CAACK,OAAb,CAAqBD,WAArB,CAAlC,EAAqEE,IAArE,CAA0E,MAAMC,IAAI,CAACC,MAAL,KAAgBP,WAAhG,CAAjB;AACA,UAAMQ,aAAa,GAAGP,QAAQ,CAACC,GAAT,CAAcO,cAAD,IAAoBV,YAAY,CAACU,cAAD,CAA7C,CAAtB,CATO,CAUP;;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYV,QAAZ;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYH,aAAZ;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYrB,OAAZ;;AACA,UAAMsB,eAAe,GAAG,CAACC,gBAAD,EAAmBC,MAAnB,KAA8B;AACpD,UAAID,gBAAgB,KAAKrB,aAAzB,EAAwC;AACtC,eACE;AAAQ,UAAA,SAAS,EAAC,gBAAlB;AAAmC,yBAAY,gBAA/C;AAAgE,UAAA,IAAI,EAAC,QAArE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACIA,aADJ,CADF;AAID;;AACD,aACE;AACE,QAAA,SAAS,EAAC,cADZ;AAEE,uBAAe,gBAAesB,MAAO,EAFvC;AAGE,QAAA,IAAI,EAAC,QAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKID,gBALJ,CADF;AAQD,KAfD;;AAgBA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAG,qBAAY,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiCjB,QAAjC,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKE,UAAL,CAFF,EAGE;AAAG,qBAAY,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqCD,QAArC,CAHF,EAIGW,aAAa,CAACN,GAAd,CAAkB,CAACa,WAAD,EAAcC,KAAd,KAAwBJ,eAAe,CAACG,WAAD,EAAcC,KAAd,CAAzD,CAJH,EAKE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAsB,MAAA,OAAO,EAAGzB,YAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBALF,CADF;AAWD;;AAxD0B;;AA2D7B,eAAeJ,IAAf;AAEAA,IAAI,CAAC8B,SAAL,GAAiB;AACf3B,EAAAA,OAAO,EAAEJ,SAAS,CAACgC,OAAV,CAAkBhC,SAAS,CAACiC,MAA5B,EAAoCC,UAD9B;AAEf7B,EAAAA,YAAY,EAAEL,SAAS,CAACmC,IAAV,CAAeD;AAFd,CAAjB","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Quiz.css';\n\nclass Quiz extends Component {\n  // constructor() {\n  //  super();\n  //  this.state = {\n  //    answered: false,\n  //  };\n  // }\n\n  // handleClick() {\n  // const { answered } = this.state;\n  //  this.setState({\n  //    answered: true,\n  //  });\n  // }\n\n  render() {\n    // const { answered } = this.state;\n    const { results, nextQuestion } = this.props;\n    const { correct_answer: correctAnswer } = results;\n    const { incorrect_answers: incorrectAnswers } = results;\n    const { question, category, difficulty } = results;\n    const allQuestions = [correctAnswer, ...incorrectAnswers];\n    const magicNumber = 0.5;\n    const allIndex = allQuestions.map((anyQuestion) => allQuestions.indexOf(anyQuestion)).sort(() => Math.random() - magicNumber);\n    const shuffledArray = allIndex.map((shuffledNumber) => allQuestions[shuffledNumber]);\n    // const shuffledArray = allIndex.sort((a,b) => Math.random() - 0.5);\n    console.log(allIndex);\n    console.log(shuffledArray);\n    console.log(results);\n    const renderQuestions = (questionToRender, number) => {\n      if (questionToRender === correctAnswer) {\n        return (\n          <button className=\"answer-correct\" data-testid=\"correct-answer\" type=\"button\">\n            { correctAnswer }\n          </button>);\n      }\n      return (\n        <button\n          className=\"answer-wrong\"\n          data-testid={ `wrong-answer-${number}` }\n          type=\"button\"\n        >\n          { questionToRender }\n        </button>);\n    };\n    return (\n      <div>\n        <p data-testid=\"question-text\">{ question }</p>\n        <p>{ difficulty }</p>\n        <p data-testid=\"question-category\">{ category }</p>\n        {shuffledArray.map((oneQuestion, index) => renderQuestions(oneQuestion, index))}\n        <button type=\"button\" onClick={ nextQuestion }>\n          Pr√≥xima\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Quiz;\n\nQuiz.propTypes = {\n  results: PropTypes.arrayOf(PropTypes.object).isRequired,\n  nextQuestion: PropTypes.func.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}