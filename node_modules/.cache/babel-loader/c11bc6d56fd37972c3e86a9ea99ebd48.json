{"ast":null,"code":"var _jsxFileName = \"/home/denner/Documentos/WebDevelopment/trybe-projects/project-trivia-react-redux/sd-07-project-trivia-react-redux/src/components/Quiz.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Quiz.css';\n\nconst shuffler = array => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n\n  return array;\n};\n\nclass Quiz extends Component {\n  // constructor() {\n  //  super();\n  //  this.state = {\n  //    answered: false,\n  //  };\n  // }\n  // handleClick() {\n  // const { answered } = this.state;\n  //  this.setState({\n  //    answered: true,\n  //  });\n  // }\n  render() {\n    // const { answered } = this.state;\n    const _this$props = this.props,\n          results = _this$props.results,\n          nextQuestion = _this$props.nextQuestion;\n    const correctAnswer = results.correct_answer;\n    const incorrectAnswers = results.incorrect_answers;\n    const question = results.question,\n          category = results.category,\n          difficulty = results.difficulty;\n    const allQuestions = [...incorrectAnswers, correctAnswer];\n    const allIndex = allQuestions.map(question => allQuestions.indexOf(question)).sort((a, b) => Math.random() - 0.5); // const shuffledArray = allIndex.sort((a,b) => Math.random() - 0.5);\n\n    console.log(allIndex); // console.log(shuffledArray);\n\n    console.log(results);\n\n    const renderQuestions = (question, number) => {\n      if (question === correctAnswer) {\n        return React.createElement(\"button\", {\n          className: \"answer-correct\",\n          \"data-testid\": \"correct-answer\",\n          type: \"button\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, correctAnswer);\n      } else {\n        return React.createElement(\"button\", {\n          className: \"answer-wrong\",\n          \"data-testid\": `wrong-answer-${number}`,\n          type: \"button\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49\n          },\n          __self: this\n        }, question);\n      }\n    };\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, question), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, difficulty), React.createElement(\"p\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, category), allQuestions.map((oneQuestion, index) => renderQuestions(oneQuestion, index)), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: nextQuestion,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, \"Pr\\xF3xima\"));\n  }\n\n}\n\nexport default Quiz;\nQuiz.propTypes = {\n  results: PropTypes.arrayOf(PropTypes.object).isRequired,\n  nextQuestion: PropTypes.func.isRequired\n};\n{\n  /* <button className=\"answer-correct\" data-testid=\"correct-answer\" type=\"button\">\n  { correctAnswer }\n  </button>\n  <button\n  className=\"answer-wrong\"\n  data-testid=\"wrong-answer-0\"\n  type=\"button\"\n  >\n  { incorrectAnswers[0] }\n  </button>\n  <button className=\"answer-wrong\" data-testid=\"wrong-answer-1\" type=\"button\">\n  { incorrectAnswers[1] }\n  </button>\n  <button className=\"answer-wrong\" data-testid=\"wrong-answer-2\" type=\"button\">\n  { incorrectAnswers[2] }\n  </button> */\n}","map":{"version":3,"sources":["/home/denner/Documentos/WebDevelopment/trybe-projects/project-trivia-react-redux/sd-07-project-trivia-react-redux/src/components/Quiz.js"],"names":["React","Component","PropTypes","shuffler","array","i","length","j","Math","floor","random","temp","Quiz","render","props","results","nextQuestion","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","question","category","difficulty","allQuestions","allIndex","map","indexOf","sort","a","b","console","log","renderQuestions","number","oneQuestion","index","propTypes","arrayOf","object","isRequired","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './Quiz.css';\n\nconst shuffler = (array) => {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    const temp = array[i];\n    array[i] = array[j];\n    array[j] = temp;\n  }\n  return array;\n};\n\nclass Quiz extends Component {\n  // constructor() {\n  //  super();\n  //  this.state = {\n  //    answered: false,\n  //  };\n  // }\n\n  // handleClick() {\n  // const { answered } = this.state;\n  //  this.setState({\n  //    answered: true,\n  //  });\n  // }\n\n  render() {\n    // const { answered } = this.state;\n    const { results, nextQuestion } = this.props;\n    const { correct_answer: correctAnswer } = results;\n    const { incorrect_answers: incorrectAnswers } = results;\n    const { question, category, difficulty } = results;\n    const allQuestions = [...incorrectAnswers, correctAnswer];\n    const allIndex = allQuestions.map((question) => allQuestions.indexOf(question)).sort((a,b) => Math.random() - 0.5);\n    // const shuffledArray = allIndex.sort((a,b) => Math.random() - 0.5);\n    console.log(allIndex);\n    // console.log(shuffledArray);\n    console.log(results);\n    const renderQuestions = (question, number) => {\n      if(question === correctAnswer) {\n        return (<button className=\"answer-correct\" data-testid=\"correct-answer\" type=\"button\">\n        { correctAnswer }\n      </button>)\n      } else {\n        return (\n        <button\n          className=\"answer-wrong\"\n          data-testid={`wrong-answer-${number}`}\n          type=\"button\">\n          { question }\n        </button>)\n      }\n    }\n    return (\n      <div>\n        <p data-testid=\"question-text\">{ question }</p>\n        <p>{ difficulty }</p>\n        <p data-testid=\"question-category\">{ category }</p>\n        {allQuestions.map((oneQuestion, index) => renderQuestions(oneQuestion, index))}\n        <button type=\"button\" onClick={ nextQuestion }>\n          Pr√≥xima\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Quiz;\n\nQuiz.propTypes = {\n  results: PropTypes.arrayOf(PropTypes.object).isRequired,\n  nextQuestion: PropTypes.func.isRequired,\n};\n\n\n{/* <button className=\"answer-correct\" data-testid=\"correct-answer\" type=\"button\">\n{ correctAnswer }\n</button>\n\n<button\nclassName=\"answer-wrong\"\ndata-testid=\"wrong-answer-0\"\ntype=\"button\"\n>\n{ incorrectAnswers[0] }\n</button>\n\n<button className=\"answer-wrong\" data-testid=\"wrong-answer-1\" type=\"button\">\n{ incorrectAnswers[1] }\n</button>\n\n<button className=\"answer-wrong\" data-testid=\"wrong-answer-2\" type=\"button\">\n{ incorrectAnswers[2] }\n</button> */}"]},"metadata":{},"sourceType":"module"}