{"ast":null,"code":"var _jsxFileName = \"/home/denner/Documentos/WebDevelopment/trybe-projects/project-trivia-react-redux/sd-07-project-trivia-react-redux/src/components/Quiz.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './Quiz.css';\nimport Timer from './Timer';\nimport { scoreUpdate } from '../redux/actions';\n\nclass Quiz extends Component {\n  constructor() {\n    super();\n    this.state = {\n      answered: false,\n      colorCorrect: '',\n      colorIncorrect: '',\n      resetTimer: false\n    };\n    this.answerColor = this.answerColor.bind(this);\n    this.nextButton = this.nextButton.bind(this);\n    this.restoreTimer = this.restoreTimer.bind(this);\n    this.scoreCalculator = this.scoreCalculator.bind(this);\n  }\n\n  handleClick() {\n    this.setState({\n      answered: true\n    });\n  }\n\n  answerColor() {\n    this.setState({\n      colorIncorrect: 'answer-wrong',\n      colorCorrect: 'answer-correct',\n      resetTimer: true\n    });\n    this.handleClick();\n  }\n\n  nextButton() {\n    this.setState({\n      answered: false,\n      colorCorrect: '',\n      colorIncorrect: '',\n      resetTimer: true\n    });\n  }\n\n  restoreTimer() {\n    this.setState({\n      resetTimer: false\n    });\n  }\n\n  scoreCalculator() {\n    const _this$props = this.props,\n          difficulty = _this$props.difficulty,\n          timer = _this$props.timer;\n    const TEN = 10;\n    const easy = 1;\n    const medium = 2;\n    const hard = 3;\n    const _this$props2 = this.props,\n          name = _this$props2.name,\n          assertions = _this$props2.assertions,\n          score = _this$props2.score,\n          gravatarEmail = _this$props2.gravatarEmail;\n    const playerObj = {\n      player: {\n        name,\n        assertions,\n        score,\n        gravatarEmail\n      }\n    };\n    localStorage.setItem('state', JSON.stringify(playerObj));\n\n    switch (difficulty) {\n      case 'easy':\n        return TEN + timer * easy;\n\n      case 'medium':\n        return TEN + timer * medium;\n\n      default:\n        return TEN + timer * hard;\n    }\n  }\n\n  render() {\n    const _this$state = this.state,\n          answered = _this$state.answered,\n          colorCorrect = _this$state.colorCorrect,\n          colorIncorrect = _this$state.colorIncorrect,\n          resetTimer = _this$state.resetTimer;\n    const _this$props3 = this.props,\n          results = _this$props3.results,\n          nextQuestion = _this$props3.nextQuestion,\n          updateScore = _this$props3.updateScore;\n    const correctAnswer = results.correct_answer;\n    const incorrectAnswers = results.incorrect_answers;\n    const question = results.question,\n          category = results.category;\n    const allQuestions = [correctAnswer, ...incorrectAnswers];\n    const magicNumber = 0.5;\n    const test = this.scoreCalculator();\n    const allIndex = allQuestions.map(anyQuestion => allQuestions.indexOf(anyQuestion)).sort(() => Math.random() - magicNumber);\n    const shuffledArray = allIndex.map(shuffledNumber => allQuestions[shuffledNumber]);\n\n    const renderQuestions = (questionToRender, number) => {\n      if (questionToRender === correctAnswer) {\n        return React.createElement(\"button\", {\n          className: ` alternative-button ${colorCorrect}`,\n          key: number,\n          \"data-testid\": \"correct-answer\",\n          type: \"button\",\n          onClick: () => {\n            this.answerColor();\n            updateScore(test);\n          },\n          disabled: answered,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, correctAnswer);\n      }\n\n      return React.createElement(\"button\", {\n        className: ` alternative-button ${colorIncorrect}`,\n        key: number,\n        \"data-testid\": `wrong-answer-${number}`,\n        type: \"button\",\n        onClick: this.answerColor,\n        disabled: answered,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, questionToRender);\n    };\n\n    return React.createElement(\"div\", {\n      className: \"page-quiz\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"column\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container-quiz\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container-question-timer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      \"data-testid\": \"question-text\",\n      className: \"question-text\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, question), React.createElement(\"p\", {\n      \"data-testid\": \"question-category\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, category), React.createElement(\"div\", {\n      className: \"container-timer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, React.createElement(Timer, {\n      answerColor: this.answerColor,\n      nextButton: this.nextButton,\n      resetTimer: resetTimer,\n      restoreTimer: this.restoreTimer,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138\n      },\n      __self: this\n    })))), React.createElement(\"div\", {\n      className: \"right\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container-answers\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, shuffledArray.map((oneQuestion, index) => renderQuestions(oneQuestion, index))))), React.createElement(\"div\", {\n      className: \"btn-next-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn-next\",\n      onClick: () => {\n        this.nextButton();\n        nextQuestion();\n      },\n      hidden: !answered,\n      \"data-testid\": \"btn-next\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"NEXT\"))));\n  }\n\n}\n\nconst mapStateToProps = ({\n  game: {\n    timer\n  },\n  player: {\n    name,\n    assertions,\n    score,\n    gravatarEmail\n  }\n}) => ({\n  timer,\n  name,\n  assertions,\n  score,\n  gravatarEmail\n});\n\nconst mapDispatchToProps = dispatch => ({\n  updateScore: info => dispatch(scoreUpdate(info))\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);\nQuiz.propTypes = {\n  results: PropTypes.arrayOf(PropTypes.object).isRequired,\n  nextQuestion: PropTypes.func.isRequired,\n  updateScore: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n  difficulty: PropTypes.string.isRequired,\n  timer: PropTypes.number.isRequired\n};","map":{"version":3,"sources":["/home/denner/Documentos/WebDevelopment/trybe-projects/project-trivia-react-redux/sd-07-project-trivia-react-redux/src/components/Quiz.js"],"names":["React","Component","PropTypes","connect","Timer","scoreUpdate","Quiz","constructor","state","answered","colorCorrect","colorIncorrect","resetTimer","answerColor","bind","nextButton","restoreTimer","scoreCalculator","handleClick","setState","props","difficulty","timer","TEN","easy","medium","hard","name","assertions","score","gravatarEmail","playerObj","player","localStorage","setItem","JSON","stringify","render","results","nextQuestion","updateScore","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","question","category","allQuestions","magicNumber","test","allIndex","map","anyQuestion","indexOf","sort","Math","random","shuffledArray","shuffledNumber","renderQuestions","questionToRender","number","oneQuestion","index","mapStateToProps","game","mapDispatchToProps","dispatch","info","propTypes","arrayOf","object","isRequired","func","string"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './Quiz.css';\nimport Timer from './Timer';\nimport { scoreUpdate } from '../redux/actions';\n\nclass Quiz extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      answered: false,\n      colorCorrect: '',\n      colorIncorrect: '',\n      resetTimer: false,\n    };\n\n    this.answerColor = this.answerColor.bind(this);\n    this.nextButton = this.nextButton.bind(this);\n    this.restoreTimer = this.restoreTimer.bind(this);\n    this.scoreCalculator = this.scoreCalculator.bind(this);\n  }\n\n  handleClick() {\n    this.setState({\n      answered: true,\n    });\n  }\n\n  answerColor() {\n    this.setState({\n      colorIncorrect: 'answer-wrong',\n      colorCorrect: 'answer-correct',\n      resetTimer: true,\n    });\n\n    this.handleClick();\n  }\n\n  nextButton() {\n    this.setState({\n      answered: false,\n      colorCorrect: '',\n      colorIncorrect: '',\n      resetTimer: true,\n    });\n  }\n\n  restoreTimer() {\n    this.setState({\n      resetTimer: false,\n    });\n  }\n\n  scoreCalculator() {\n    const { difficulty, timer } = this.props;\n    const TEN = 10;\n    const easy = 1;\n    const medium = 2;\n    const hard = 3;\n\n    const { name, assertions, score, gravatarEmail } = this.props;\n    const playerObj = { player: { name, assertions, score, gravatarEmail } };\n\n    localStorage.setItem('state', JSON.stringify(playerObj));\n\n    switch (difficulty) {\n    case 'easy':\n      return (\n        TEN + (timer * easy)\n      );\n    case 'medium':\n      return (\n        TEN + (timer * medium)\n      );\n    default:\n      return (\n        TEN + (timer * hard)\n      );\n    }\n  }\n\n  render() {\n    const { answered, colorCorrect, colorIncorrect, resetTimer } = this.state;\n    const { results, nextQuestion, updateScore } = this.props;\n    const { correct_answer: correctAnswer } = results;\n    const { incorrect_answers: incorrectAnswers } = results;\n    const { question, category } = results;\n    const allQuestions = [correctAnswer, ...incorrectAnswers];\n    const magicNumber = 0.5;\n    const test = this.scoreCalculator();\n    const allIndex = allQuestions\n      .map((anyQuestion) => allQuestions\n        .indexOf(anyQuestion))\n      .sort(() => Math.random() - magicNumber);\n    const shuffledArray = allIndex.map((shuffledNumber) => allQuestions[shuffledNumber]);\n    const renderQuestions = (questionToRender, number) => {\n      if (questionToRender === correctAnswer) {\n        return (\n          <button\n            className={ ` alternative-button ${colorCorrect}` }\n            key={ number }\n            data-testid=\"correct-answer\"\n            type=\"button\"\n            onClick={ () => {\n              this.answerColor();\n              updateScore(test);\n            } }\n            disabled={ answered }\n          >\n            { correctAnswer }\n          </button>);\n      }\n      return (\n        <button\n          className={ ` alternative-button ${colorIncorrect}` }\n          key={ number }\n          data-testid={ `wrong-answer-${number}` }\n          type=\"button\"\n          onClick={ this.answerColor }\n          disabled={ answered }\n        >\n          { questionToRender }\n        </button>);\n    };\n    return (\n      <div className=\"page-quiz\">\n        <div className=\"column\">\n          <div className=\"container-quiz\">\n            <div className=\"left\">\n              <div className=\"container-question-timer\">\n                <p data-testid=\"question-text\" className=\"question-text\">{ question }</p>\n                <p data-testid=\"question-category\">\n                  { category }\n                </p>\n                <div className=\"container-timer\">\n                  <Timer\n                    answerColor={ this.answerColor }\n                    nextButton={ this.nextButton }\n                    resetTimer={ resetTimer }\n                    restoreTimer={ this.restoreTimer }\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"right\">\n              <div className=\"container-answers\">\n                {shuffledArray.map((oneQuestion, index) => renderQuestions(oneQuestion, index))}\n              </div>\n            </div>\n          </div>\n          <div className=\"btn-next-container\">\n            <button\n              type=\"button\"\n              className=\"btn-next\"\n              onClick={ () => { this.nextButton(); nextQuestion(); } }\n              hidden={ !answered }\n              data-testid=\"btn-next\"\n            >\n              NEXT\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  game: {\n    timer,\n  },\n  player: {\n    name,\n    assertions,\n    score,\n    gravatarEmail,\n  },\n}) => ({\n  timer,\n  name,\n  assertions,\n  score,\n  gravatarEmail,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateScore: (info) => dispatch(scoreUpdate(info)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);\n\nQuiz.propTypes = {\n  results: PropTypes.arrayOf(PropTypes.object).isRequired,\n  nextQuestion: PropTypes.func.isRequired,\n  updateScore: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n  difficulty: PropTypes.string.isRequired,\n  timer: PropTypes.number.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}