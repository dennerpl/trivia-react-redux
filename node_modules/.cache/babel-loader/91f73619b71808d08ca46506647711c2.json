{"ast":null,"code":"import _objectSpread from \"/home/denner/Documentos/WebDevelopment/trybe-projects/project-trivia-react-redux/sd-07-project-trivia-react-redux/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport types from '../actions/types';\nconst LOGIN_INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n  tokenString: '',\n  picture: ''\n};\n\nconst player = (state = LOGIN_INITIAL_STATE, action) => {\n  switch (action.type) {\n    case types.LOGIN_INFO:\n      return _objectSpread({}, state, {\n        name: action.payload.name,\n        gravatarEmail: action.payload.email\n      });\n\n    case types.REQUEST_TOKEN_SUCCESS:\n      return _objectSpread({}, state, {\n        tokenString: action.token\n      });\n\n    case types.SCORE_UPDATE:\n      return _objectSpread({}, state, {\n        score: state.score + action.payload,\n        assertions: state.assertions + 1\n      });\n\n    case types.RESET_SCORE:\n      return _objectSpread({}, state, {\n        score: 0,\n        assertions: 0\n      });\n\n    case types.SAVE_PICTURE:\n      return _objectSpread({}, state, {\n        picture: action.payload\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default player;","map":{"version":3,"sources":["/home/denner/Documentos/WebDevelopment/trybe-projects/project-trivia-react-redux/sd-07-project-trivia-react-redux/src/redux/reducers/player.js"],"names":["types","LOGIN_INITIAL_STATE","name","assertions","score","gravatarEmail","tokenString","picture","player","state","action","type","LOGIN_INFO","payload","email","REQUEST_TOKEN_SUCCESS","token","SCORE_UPDATE","RESET_SCORE","SAVE_PICTURE"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,kBAAlB;AAEA,MAAMC,mBAAmB,GAAG;AAC1BC,EAAAA,IAAI,EAAE,EADoB;AAE1BC,EAAAA,UAAU,EAAE,CAFc;AAG1BC,EAAAA,KAAK,EAAE,CAHmB;AAI1BC,EAAAA,aAAa,EAAE,EAJW;AAK1BC,EAAAA,WAAW,EAAE,EALa;AAM1BC,EAAAA,OAAO,EAAE;AANiB,CAA5B;;AASA,MAAMC,MAAM,GAAG,CAACC,KAAK,GAAGR,mBAAT,EAA8BS,MAA9B,KAAyC;AACtD,UAAQA,MAAM,CAACC,IAAf;AACA,SAAKX,KAAK,CAACY,UAAX;AACE,+BACKH,KADL;AAEEP,QAAAA,IAAI,EAAEQ,MAAM,CAACG,OAAP,CAAeX,IAFvB;AAGEG,QAAAA,aAAa,EAAEK,MAAM,CAACG,OAAP,CAAeC;AAHhC;;AAKF,SAAKd,KAAK,CAACe,qBAAX;AACE,+BACKN,KADL;AAEEH,QAAAA,WAAW,EAAEI,MAAM,CAACM;AAFtB;;AAIF,SAAKhB,KAAK,CAACiB,YAAX;AACE,+BACKR,KADL;AAEEL,QAAAA,KAAK,EAAEK,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACG,OAF9B;AAGEV,QAAAA,UAAU,EAAEM,KAAK,CAACN,UAAN,GAAmB;AAHjC;;AAKF,SAAKH,KAAK,CAACkB,WAAX;AACE,+BACKT,KADL;AAEEL,QAAAA,KAAK,EAAE,CAFT;AAGED,QAAAA,UAAU,EAAE;AAHd;;AAKF,SAAKH,KAAK,CAACmB,YAAX;AACE,+BACKV,KADL;AAEEF,QAAAA,OAAO,EAAEG,MAAM,CAACG;AAFlB;;AAIF;AACE,aAAOJ,KAAP;AA9BF;AAgCD,CAjCD;;AAmCA,eAAeD,MAAf","sourcesContent":["import types from '../actions/types';\n\nconst LOGIN_INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n  tokenString: '',\n  picture: '',\n};\n\nconst player = (state = LOGIN_INITIAL_STATE, action) => {\n  switch (action.type) {\n  case types.LOGIN_INFO:\n    return ({\n      ...state,\n      name: action.payload.name,\n      gravatarEmail: action.payload.email,\n    });\n  case types.REQUEST_TOKEN_SUCCESS:\n    return ({\n      ...state,\n      tokenString: action.token,\n    });\n  case types.SCORE_UPDATE:\n    return ({\n      ...state,\n      score: state.score + action.payload,\n      assertions: state.assertions + 1,\n    });\n  case types.RESET_SCORE:\n    return ({\n      ...state,\n      score: 0,\n      assertions: 0,\n    });\n  case types.SAVE_PICTURE:\n    return ({\n      ...state,\n      picture: action.payload,\n    });\n  default:\n    return state;\n  }\n};\n\nexport default player;\n"]},"metadata":{},"sourceType":"module"}