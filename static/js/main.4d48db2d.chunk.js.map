{"version":3,"sources":["trivia.png","redux/actions/types.js","redux/reducers/player.js","redux/reducers/game.js","redux/reducers/index.js","redux/store/index.js","services/apiTriviaToken.js","services/apiTrivia.js","redux/actions/index.js","pages/Login.js","components/ButtonLogin.js","components/RankingItem.js","components/Timer.js","pages/Settings.js","services/localStorageFunctions.js","pages/Feedback.js","components/Header.js","components/Quiz.js","pages/Game.js","pages/Ranking.js","serviceWorker.js","index.js","App.js"],"names":["module","exports","types","LOGIN_INFO","IS_FETCHING","REQUEST_SUCCESS","REQUEST_TOKEN_SUCCESS","SCORE_UPDATE","RESET_SCORE","SAVE_TIMER","SAVE_PICTURE","LOGIN_INITIAL_STATE","name","assertions","score","gravatarEmail","tokenString","picture","player","state","action","type","payload","email","token","GAME_INITIAL_STATE","questions","isLoading","timer","game","rootReducer","combineReducers","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","apiTriviaToken","a","async","fetch","request","json","response","apiTrivia","endPoint","requestSuccess","Login","isValid","bind","handleChange","handleClick","this","test","target","value","setState","props","sendLogin","requestToken","requestQuestions","tokenObj","localStorage","setItem","className","src","logo","alt","autoComplete","placeholder","data-testid","onChange","to","disabled","onClick","Component","connect","dispatch","info","ButtonLogin","RankingItem","index","key","Timer","reloadTimer","setInterval","answerColor","prevState","checkIfAnswered","resetTimer","restoreTimer","saveTime","Settings","rankingLocalStorage","getItem","JSON","parse","Feedback","atualPlayer","rankingArray","push","stringify","Header","gravatarHash","md5","savePic","urlPicture","height","Quiz","answered","colorCorrect","colorIncorrect","nextButton","scoreCalculator","difficulty","playerObj","results","nextQuestion","updateScore","correctAnswer","correct_answer","incorrectAnswers","incorrect_answers","question","category","allQuestions","shuffledArray","map","anyQuestion","indexOf","sort","Math","random","shuffledNumber","oneQuestion","number","questionToRender","hidden","Game","createLocalStorage","resetScoreAssertion","history","undefined","Ranking","ranking","console","log","length","first","second","Boolean","location","hostname","match","ReactDOM","render","basename","process","exact","path","component","pages","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d48db2d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";","const types = {\n  LOGIN_INFO: 'LOGIN_INFO',\n  IS_FETCHING: 'IS_FETCHING',\n  REQUEST_SUCCESS: 'REQUEST_SUCCESS',\n  REQUEST_TOKEN_SUCCESS: 'REQUEST_TOKEN_SUCCESS',\n  SCORE_UPDATE: 'SCORE_UPDATE',\n  RESET_SCORE: 'RESET_SCORE',\n  SAVE_TIMER: 'SAVE_TIMER',\n  SAVE_PICTURE: 'SAVE_PICTURE',\n};\n\nexport default types;\n","import types from '../actions/types';\n\nconst LOGIN_INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n  tokenString: '',\n  picture: '',\n};\n\nconst player = (state = LOGIN_INITIAL_STATE, action) => {\n  switch (action.type) {\n  case types.LOGIN_INFO:\n    return ({\n      ...state,\n      name: action.payload.name,\n      gravatarEmail: action.payload.email,\n    });\n  case types.REQUEST_TOKEN_SUCCESS:\n    return ({\n      ...state,\n      tokenString: action.token,\n    });\n  case types.SCORE_UPDATE:\n    return ({\n      ...state,\n      score: state.score + action.payload,\n      assertions: state.assertions + 1,\n    });\n  case types.RESET_SCORE:\n    return ({\n      ...state,\n      score: 0,\n      assertions: 0,\n    });\n  case types.SAVE_PICTURE:\n    return ({\n      ...state,\n      picture: action.payload,\n    });\n  default:\n    return state;\n  }\n};\n\nexport default player;\n","import types from '../actions/types';\n\nconst GAME_INITIAL_STATE = {\n  questions: {},\n  isLoading: false,\n  timer: 0,\n};\n\nconst game = (state = GAME_INITIAL_STATE, action) => {\n  switch (action.type) {\n  case types.IS_FETCHING:\n    return ({\n      ...state,\n      isLoading: true,\n    });\n  case types.REQUEST_SUCCESS:\n    return ({\n      ...state,\n      questions: action.questions,\n      isLoading: false,\n    });\n  case types.SAVE_TIMER:\n    return ({\n      ...state,\n      timer: action.payload,\n    });\n  default:\n    return state;\n  }\n};\n\nexport default game;\n","import { combineReducers } from 'redux';\nimport player from './player';\nimport game from './game';\n\nconst rootReducer = combineReducers({ player, game });\n\nexport default rootReducer;\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(\n  rootReducer,\n  composeEnhancer(applyMiddleware(thunk)),\n);\n\nexport default store;\n","const endPoint = 'https://opentdb.com/api_token.php?command=request';\nconst apiTriviaToken = async () => {\n  const request = await fetch(endPoint);\n  const response = await request.json();\n  return response;\n};\n\nexport default apiTriviaToken;\n","// const token = JSON.parse(localStorage.getItem('token'));\n\nconst apiTrivia = async (token) => {\n  const endPoint = `https://opentdb.com/api.php?amount=5&token=${token}`;\n  const request = await fetch(endPoint);\n  const response = await request.json();\n  return response;\n};\n\nexport default apiTrivia;\n","import types from './types';\nimport apiTrivia from '../../services/apiTrivia';\n\nexport const sendLoginInfo = (payload) => (\n  {\n    type: types.LOGIN_INFO,\n    payload,\n  }\n);\n\nexport const isFetching = () => (\n  {\n    type: types.IS_FETCHING,\n  }\n);\n\nexport const requestSuccess = (questions) => (\n  {\n    type: types.REQUEST_SUCCESS,\n    questions,\n  }\n);\n\nexport const requestTokenSuccess = (token) => (\n  {\n    type: types.REQUEST_TOKEN_SUCCESS,\n    token,\n  }\n);\n\nexport const scoreUpdate = (payload) => (\n  {\n    type: types.SCORE_UPDATE,\n    payload,\n  }\n);\n\nexport const resetScore = () => (\n  {\n    type: types.RESET_SCORE,\n  }\n);\n\nexport const saveTimer = (payload) => (\n  {\n    type: types.SAVE_TIMER,\n    payload,\n  }\n);\n\nexport const savePicture = (payload) => (\n  {\n    type: types.SAVE_PICTURE,\n    payload,\n  }\n);\n\nexport function fetchApiTrivia(token) {\n  return async (dispatch) => {\n    dispatch(isFetching());\n    const questions = await apiTrivia(token);\n    dispatch(requestSuccess(questions));\n  };\n}\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport apiTriviaToken from '../services/apiTriviaToken';\nimport { fetchApiTrivia, requestTokenSuccess, sendLoginInfo } from '../redux/actions';\nimport logo from '../trivia.png';\nimport './Login.css';\n\nclass Login extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      name: '',\n      email: '',\n    };\n\n    this.isValid = this.isValid.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  isValid() {\n    const { name, email } = this.state;\n    const emailValid = /\\S+@\\S+\\.\\S+/;\n    if (name !== '' && emailValid.test(email)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({ [name]: value });\n  }\n\n  async handleClick() {\n    const { name, email } = this.state;\n\n    const { sendLogin, requestToken, requestQuestions } = this.props;\n    sendLogin({ name, email });\n    // fetchToken();\n    const tokenObj = await apiTriviaToken();\n    const { token } = tokenObj;\n\n    requestToken(token);\n\n    localStorage.setItem('token', token);\n    requestQuestions(token);\n  }\n\n  render() {\n    const { name, email } = this.state;\n    return (\n      <div className=\"login-page\">\n        <img src={ logo } className=\"App-logo\" alt=\"logo\" />\n        <div className=\"flex-parent\">\n          <form className=\"input-container\">\n            <input\n              type=\"text\"\n              name=\"name\"\n              className=\"login-input\"\n              value={ name }\n              autoComplete=\"off\"\n              placeholder=\"Nome\"\n              data-testid=\"input-player-name\"\n              onChange={ this.handleChange }\n            />\n\n            <input\n              type=\"email\"\n              name=\"email\"\n              autoComplete=\"off\"\n              className=\"login-input\"\n              value={ email }\n              placeholder=\"E-mail\"\n              data-testid=\"input-gravatar-email\"\n              onChange={ this.handleChange }\n            />\n          </form>\n          <div className=\"login-links-container\">\n            <Link to=\"/game\">\n              <button\n                type=\"button\"\n                className=\"login-buttons\"\n                disabled={ this.isValid() }\n                data-testid=\"btn-play\"\n                onClick={ this.handleClick }\n              >\n                Play\n              </button>\n            </Link>\n\n            <Link to=\"/settings\">\n              <button\n                type=\"button\"\n                data-testid=\"btn-settings\"\n                className=\"login-buttons\"\n\n              >\n                Settings\n              </button>\n            </Link>\n            <Link to=\"/ranking\">\n              <button\n                type=\"button\"\n                data-testid=\"btn-ranking\"\n                className=\"login-buttons\"\n\n              >\n                Ranking\n              </button>\n            </Link>\n\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  sendLogin: (info) => dispatch(sendLoginInfo(info)),\n  requestToken: (info) => dispatch(requestTokenSuccess(info)),\n  requestQuestions: (info) => dispatch(fetchApiTrivia(info)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n\nLogin.propTypes = {\n  sendLogin: PropTypes.func.isRequired,\n  requestToken: PropTypes.func.isRequired,\n  requestQuestions: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass ButtonLogin extends Component {\n  render() {\n    return (\n      <Link to=\"/\">\n        <button\n          type=\"button\"\n          data-testid=\"btn-go-home\"\n          className=\"login-buttons button-home\"\n        >\n          Home\n        </button>\n      </Link>\n    );\n  }\n}\n\nexport default ButtonLogin;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport './RankingItem.css';\n\nclass RankingItem extends Component {\n  render() {\n    const { player, index } = this.props;\n    const { name, score, picture } = player;\n    return (\n      <li key={ index } className=\"ranking-item\">\n        <div>\n          <img\n            src={ picture }\n            alt=\"player\"\n            className=\"profile-picture picture-ranking\"\n          />\n        </div>\n        <div>\n          <p data-testid={ `player-name-${index}` } className=\"player-name\">{name}</p>\n          <p data-testid={ `player-score-${index}` }>\n            {score}\n            {' '}\n            points\n          </p>\n        </div>\n\n      </li>\n    );\n  }\n}\n\nRankingItem.propTypes = {\n  player: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    score: PropTypes.number.isRequired,\n    picture: PropTypes.string.isRequired,\n  }).isRequired,\n  index: PropTypes.number.isRequired,\n};\n\nexport default RankingItem;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { saveTimer } from '../redux/actions';\nimport './Timer.css';\n\nclass Timer extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      timer: 30,\n    };\n\n    this.reloadTimer = this.reloadTimer.bind(this);\n  }\n\n  componentDidMount() {\n    const interval = 1000;\n    setInterval(this.reloadTimer, interval);\n  }\n\n  reloadTimer() {\n    const { timer } = this.state;\n    const { answerColor } = this.props;\n    if (timer > 0) {\n      this.setState((prevState) => ({\n        timer: prevState.timer - 1,\n      }), this.checkIfAnswered);\n    } else {\n      answerColor();\n      this.setState({\n        timer: 30,\n      });\n    }\n  }\n\n  checkIfAnswered() {\n    const { timer } = this.state;\n    const { resetTimer, restoreTimer, saveTime } = this.props;\n    if (resetTimer) {\n      saveTime(timer);\n      this.setState({\n        timer: 30,\n      }, restoreTimer);\n    }\n  }\n\n  render() {\n    const { timer } = this.state;\n    return (\n      <div className=\"timer\">\n        Remaining time:\n        {' '}\n        {timer}\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  saveTime: (info) => dispatch(saveTimer(info)),\n});\n\nTimer.propTypes = {\n  answerColor: PropTypes.func.isRequired,\n  restoreTimer: PropTypes.func.isRequired,\n  resetTimer: PropTypes.bool.isRequired,\n  saveTime: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Timer);\n","import React, { Component } from 'react';\nimport * as components from '../components';\nimport './Settings.css';\n\nclass Settings extends Component {\n  render() {\n    return (\n      <div className=\"settings-page\">\n        <h1 data-testid=\"settings-title\" className=\"page-title\">\n          Settings\n        </h1>\n        <components.ButtonLogin />\n      </div>\n    );\n  }\n}\n\nexport default Settings;\n","function rankingLocalStorage() {\n  if (localStorage.getItem('ranking') === null) {\n    localStorage.setItem('ranking', '[]');\n  }\n  return JSON.parse(localStorage.getItem('ranking'));\n}\n\nexport default rankingLocalStorage;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport rankingLocalStorage from '../services/localStorageFunctions';\nimport './Feedback.css';\n\nclass Feedback extends Component {\n  componentDidMount() {\n    const { name, score, picture } = this.props;\n    const atualPlayer = { name, score, picture };\n    const rankingArray = rankingLocalStorage();\n    rankingArray.push(atualPlayer);\n\n    localStorage.setItem('ranking', JSON.stringify(rankingArray));\n  }\n\n  render() {\n    const minAssertions = 3;\n    const { assertions, score } = this.props;\n    return (\n      <div className=\"feedback-page\">\n        <p data-testid=\"feedback-text\" className=\"feedback-text\">\n          {\n            assertions >= minAssertions\n              ? 'Well done!'\n              : 'Try again'\n          }\n        </p>\n        <div className=\"score-container\">\n          <p>\n            Final Score:\n            {' '}\n            <span\n              data-testid=\"feedback-total-score\"\n              className=\"final-score\"\n            >\n              {score}\n            </span>\n          </p>\n          <p>\n            Correct Answers:\n            {' '}\n            <span\n              data-testid=\"feedback-total-question\"\n              className=\"correct-answers\"\n            >\n              {assertions}\n            </span>\n          </p>\n        </div>\n        <div className=\"feedback-links-container\">\n          <Link to=\"/\">\n            <button\n              data-testid=\"btn-play-again\"\n              type=\"button\"\n              className=\"feedback-buttons\"\n            >\n              Play Again\n            </button>\n          </Link>\n\n          <Link to=\"/ranking\">\n            <button\n              data-testid=\"btn-ranking\"\n              type=\"button\"\n              className=\"feedback-buttons\"\n            >\n              Ranking\n            </button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  name: PropTypes.string.isRequired,\n  picture: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  assertions: state.player.assertions,\n  score: state.player.score,\n  name: state.player.name,\n  picture: state.player.picture,\n});\n\nexport default connect(mapStateToProps)(Feedback);\n","import React, { Component } from 'react';\nimport md5 from 'crypto-js/md5';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { savePicture } from '../redux/actions';\nimport './Header.css';\n\nclass Header extends Component {\n  constructor() {\n    super();\n    this.gravatarHash = this.gravatarHash.bind(this);\n  }\n\n  gravatarHash() {\n    const { gravatarEmail } = this.props;\n    const hash = md5(gravatarEmail);\n    return hash;\n  }\n\n  render() {\n    const { name, score, savePic } = this.props;\n    const urlPicture = `https://www.gravatar.com/avatar/${this.gravatarHash()}`;\n    savePic(urlPicture);\n\n    return (\n      <div className=\"header\">\n        {/* <div className=\"name-and-pic\"> */}\n        <img\n          data-testid=\"header-profile-picture\"\n          src={ urlPicture }\n          className=\"profile-picture\"\n          height=\"100%\"\n          alt=\"Avatar\"\n        />\n        <p data-testid=\"header-player-name\" className=\"header-player-name\">{ name }</p>\n        {/* </div> */}\n        <p data-testid=\"header-score\" className=\"header-score\">\n          { score }\n          {' '}\n          points\n        </p>\n      </div>\n\n    );\n  }\n}\n\nconst mapStateToProps = ({ player: { name, gravatarEmail, score } }) => ({\n  name,\n  gravatarEmail,\n  score,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  savePic: (info) => dispatch(savePicture(info)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n\nHeader.propTypes = {\n  gravatarEmail: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  savePic: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport './Quiz.css';\nimport Timer from './Timer';\nimport { scoreUpdate } from '../redux/actions';\n\nclass Quiz extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      answered: false,\n      colorCorrect: '',\n      colorIncorrect: '',\n      resetTimer: false,\n    };\n\n    this.answerColor = this.answerColor.bind(this);\n    this.nextButton = this.nextButton.bind(this);\n    this.restoreTimer = this.restoreTimer.bind(this);\n    this.scoreCalculator = this.scoreCalculator.bind(this);\n  }\n\n  handleClick() {\n    this.setState({\n      answered: true,\n    });\n  }\n\n  answerColor() {\n    this.setState({\n      colorIncorrect: 'answer-wrong',\n      colorCorrect: 'answer-correct',\n      resetTimer: true,\n    });\n\n    this.handleClick();\n  }\n\n  nextButton() {\n    this.setState({\n      answered: false,\n      colorCorrect: '',\n      colorIncorrect: '',\n      resetTimer: true,\n    });\n  }\n\n  restoreTimer() {\n    this.setState({\n      resetTimer: false,\n    });\n  }\n\n  scoreCalculator() {\n    const { difficulty, timer } = this.props;\n    const TEN = 10;\n    const easy = 1;\n    const medium = 2;\n    const hard = 3;\n\n    const { name, assertions, score, gravatarEmail } = this.props;\n    const playerObj = { player: { name, assertions, score, gravatarEmail } };\n\n    localStorage.setItem('state', JSON.stringify(playerObj));\n\n    switch (difficulty) {\n    case 'easy':\n      return (\n        TEN + (timer * easy)\n      );\n    case 'medium':\n      return (\n        TEN + (timer * medium)\n      );\n    default:\n      return (\n        TEN + (timer * hard)\n      );\n    }\n  }\n\n  render() {\n    const { answered, colorCorrect, colorIncorrect, resetTimer } = this.state;\n    const { results, nextQuestion, updateScore } = this.props;\n    const { correct_answer: correctAnswer } = results;\n    const { incorrect_answers: incorrectAnswers } = results;\n    const { question, category } = results;\n    const allQuestions = [correctAnswer, ...incorrectAnswers];\n    const magicNumber = 0.5;\n    const test = this.scoreCalculator();\n    const allIndex = allQuestions\n      .map((anyQuestion) => allQuestions\n        .indexOf(anyQuestion))\n      .sort(() => Math.random() - magicNumber);\n    const shuffledArray = allIndex.map((shuffledNumber) => allQuestions[shuffledNumber]);\n    const renderQuestions = (questionToRender, number) => {\n      if (questionToRender === correctAnswer) {\n        return (\n          <button\n            className={ ` alternative-button ${colorCorrect}` }\n            key={ number }\n            data-testid=\"correct-answer\"\n            type=\"button\"\n            onClick={ () => {\n              this.answerColor();\n              updateScore(test);\n            } }\n            disabled={ answered }\n          >\n            { correctAnswer }\n          </button>);\n      }\n      return (\n        <button\n          className={ ` alternative-button ${colorIncorrect}` }\n          key={ number }\n          data-testid={ `wrong-answer-${number}` }\n          type=\"button\"\n          onClick={ this.answerColor }\n          disabled={ answered }\n        >\n          { questionToRender }\n        </button>);\n    };\n    return (\n      <div className=\"page-quiz\">\n        <div className=\"column\">\n          <div className=\"container-quiz\">\n            <div className=\"left\">\n              <div className=\"container-question-timer\">\n                <p data-testid=\"question-text\" className=\"question-text\">{ question }</p>\n                <p data-testid=\"question-category\">\n                  { category }\n                </p>\n                <div className=\"container-timer\">\n                  <Timer\n                    answerColor={ this.answerColor }\n                    nextButton={ this.nextButton }\n                    resetTimer={ resetTimer }\n                    restoreTimer={ this.restoreTimer }\n                  />\n                </div>\n              </div>\n            </div>\n            <div className=\"right\">\n              <div className=\"container-answers\">\n                {shuffledArray.map((oneQuestion, index) => renderQuestions(oneQuestion, index))}\n              </div>\n            </div>\n          </div>\n          <div className=\"btn-next-container\">\n            <button\n              type=\"button\"\n              className=\"btn-next\"\n              onClick={ () => { this.nextButton(); nextQuestion(); } }\n              hidden={ !answered }\n              data-testid=\"btn-next\"\n            >\n              NEXT\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({\n  game: {\n    timer,\n  },\n  player: {\n    name,\n    assertions,\n    score,\n    gravatarEmail,\n  },\n}) => ({\n  timer,\n  name,\n  assertions,\n  score,\n  gravatarEmail,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateScore: (info) => dispatch(scoreUpdate(info)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Quiz);\n\nQuiz.propTypes = {\n  results: PropTypes.arrayOf(PropTypes.object).isRequired,\n  nextQuestion: PropTypes.func.isRequired,\n  updateScore: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  assertions: PropTypes.number.isRequired,\n  score: PropTypes.number.isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n  difficulty: PropTypes.string.isRequired,\n  timer: PropTypes.number.isRequired,\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Header from '../components/Header';\nimport Quiz from '../components/Quiz';\nimport { resetScore } from '../redux/actions';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    // const { results } = this.props;\n    this.state = {\n      key: 0,\n      //  results: results,\n    };\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.createLocalStorage = this.createLocalStorage.bind(this);\n  }\n\n  componentDidMount() {\n    this.createLocalStorage();\n  }\n\n  createLocalStorage() {\n    const { name, gravatarEmail, resetScoreAssertion } = this.props;\n    resetScoreAssertion();\n    const playerObj = { player: { name, assertions: 0, score: 0, gravatarEmail } };\n    localStorage.setItem('state', JSON.stringify(playerObj));\n  }\n\n  nextQuestion() {\n    const { key } = this.state;\n    const { history } = this.props;\n    const numberQuestion = 4;\n    if (key === numberQuestion) {\n      history.push('/feedback');\n    } if (key < numberQuestion) {\n      this.setState({\n        key: key + 1,\n      });\n    }\n  }\n\n  render() {\n    const { key } = this.state;\n    const { results, isLoading } = this.props;\n    if (isLoading || results === undefined) {\n      return <p className=\"loader\" />;\n    }\n\n    return (\n      <div>\n        <Header />\n        <Quiz\n          nextQuestion={ this.nextQuestion }\n          results={ results[key] }\n        />\n      </div>\n    );\n  }\n}\nconst mapStateToProps = ({\n  game: {\n    isLoading,\n    questions: { results },\n  },\n  player: {\n    name,\n    assertions,\n    score,\n    gravatarEmail,\n  },\n}) => ({\n  isLoading,\n  results,\n  name,\n  assertions,\n  score,\n  gravatarEmail,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  resetScoreAssertion: (info) => dispatch(resetScore(info)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n\nGame.propTypes = {\n  isLoading: PropTypes.bool.isRequired,\n  results: PropTypes.arrayOf(PropTypes.object).isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  name: PropTypes.string.isRequired,\n  gravatarEmail: PropTypes.string.isRequired,\n  resetScoreAssertion: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport * as components from '../components';\nimport rankingLocalStorage from '../services/localStorageFunctions';\nimport './Ranking.css';\n\nclass Ranking extends Component {\n  render() {\n    // const { ranking } = this.state;\n    const ranking = rankingLocalStorage();\n    console.log(ranking);\n    const compareNumber = 0;\n\n    if (\n      ranking.length !== compareNumber\n      // || ranking !== undefined\n      // || ranking !== null\n    ) {\n      return (\n        <div className=\"ranking-page\">\n          <h1 data-testid=\"ranking-title\" className=\"page-title\">Ranking</h1>\n          <ul className=\"ranking-list\">\n            {ranking\n              .sort((first, second) => second.score - first.score)\n              .map((player, index) => (\n                <components.RankingItem\n                  player={ player }\n                  key={ index }\n                  index={ index }\n                />\n              ))}\n          </ul>\n          <components.ButtonLogin />\n        </div>\n      );\n    }\n    return (\n      <div className=\"ranking-page-empty\">\n        <h1 data-testid=\"ranking-title\" className=\"page-title\">Ranking</h1>\n        <p className=\"empty-message\">Nothing yet!</p>\n        <components.ButtonLogin />\n      </div>\n    );\n  }\n}\n\nexport default Ranking;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename={process.env.PUBLIC_URL}>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport * as pages from './pages';\nimport './App.css';\n\nexport default function App() {\n  return (\n    <Switch>\n      <Route exact path=\"/\" component={ pages.Login } />\n      <Route path=\"/settings\" component={ pages.Settings } />\n      <Route path=\"/feedback\" component={ pages.Feedback } />\n      <Route path=\"/game\" component={ pages.Game } />\n      <Route path=\"/ranking\" component={ pages.Ranking } />\n    </Switch>\n  );\n}\n"],"sourceRoot":""}